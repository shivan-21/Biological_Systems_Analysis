function [tooHighATP,ATP_fluxes] = plotATPTestResults(refinedFolder, reconVersion, varargin)
% This function plots the maximal ATP yield by refined reconstructions and
% reports whether ATP production is feasible. Optionally, draft
% reconstructions can be included.
%
% USAGE:
%
%    [tooHighATP,ATP_fluxes] = plotATPTestResults(refinedFolder, reconVersion, varargin)
%
%
% REQUIRED INPUTS
% refinedFolder             Folder with refined COBRA models generated by
%                           the refinement pipeline
% reconVersion              Name of the refined reconstruction resource
%
% OPTIONAL INPUTS
% testResultsFolder         Folder where the test results should be saved
% numWorkers                Number of workers in parallel pool (default: 0)
% translatedDraftsFolder    Folder with  translated draft COBRA models
%                           generated by KBase pipeline to analyze (will
%                           only be analyzed if folder is provided)
%
% OUTPUT
% tooHighATP                List of IDs for refined reconstructions that
%                           produce too much ATP on complex medium
% ATP_fluxes                 Computed ATP production fluxes for each model
%
% .. Authors:
%       - Almut Heinken, 09/2020

% Define default input parameters if not specified
parser = inputParser();
parser.addRequired('refinedFolder', @ischar);
parser.addRequired('reconVersion', @ischar);
parser.addParameter('testResultsFolder', [pwd filesep 'TestResults'], @ischar);
parser.addParameter('numWorkers', 0, @isnumeric);
parser.addParameter('translatedDraftsFolder', '', @ischar);

parser.parse(refinedFolder, reconVersion, varargin{:});

refinedFolder = parser.Results.refinedFolder;
testResultsFolder = parser.Results.testResultsFolder;
numWorkers = parser.Results.numWorkers;
reconVersion = parser.Results.reconVersion;
translatedDraftsFolder = parser.Results.translatedDraftsFolder;

mkdir(testResultsFolder)

tooHighATP = {};
cnt=1;

% initialize COBRA Toolbox and parallel pool
global CBT_LP_SOLVER
if isempty(CBT_LP_SOLVER)
    initCobraToolbox
end
solver = CBT_LP_SOLVER;

if numWorkers > 0
    % with parallelization
    poolobj = gcp('nocreate');
    if isempty(poolobj)
        parpool(numWorkers)
    end
end
environment = getEnvironment();

if ~isempty(translatedDraftsFolder)
    % test draft and refined reconstructions
    folders={
        translatedDraftsFolder
        refinedFolder
        };
else
    % only refined reconstructions
    folders={
        refinedFolder
        };
end

for f=1:length(folders)
    dInfo = dir(folders{f});
    modelList={dInfo.name};
    modelList=modelList';
    modelList(~contains(modelList(:,1),'.mat'),:)=[];
    
    parfor i=1:length(modelList)
        restoreEnvironment(environment);
        changeCobraSolver(solver, 'LP', 0, -1);
        
        model=readCbModel([folders{f} filesep modelList{i}]);
        biomassID=find(strncmp(model.rxns,'bio',3));
        [atpFluxAerobic, atpFluxAnaerobic] = testATP(model);
        aerRes{i,f}=atpFluxAerobic;
        anaerRes{i,f}=atpFluxAnaerobic;
    end
    
    for i=1:length(modelList)
        atp{f}(i,1)=aerRes{i,f};
        atp{f}(i,2)=anaerRes{i,f};
    end
end

data=[];
for f=1:length(folders)
    data(:,size(data,2)+1:size(data,2)+2)=atp{f}(:,1:2);
end


if ~isempty(translatedDraftsFolder)
    % draft and refined reconstructions
    figure;
    hold on
    violinplot(data, {'Aerobic, Draft','Anaerobic, Draft','Aerobic, Refined','Anaerobic, Refined'});
    set(gca, 'FontSize', 12)
    box on
    maxval=max(data,[],'all');
    ylim([0 maxval + maxval/10])
    h=title(['ATP production on complex medium, ' reconVersion]);
    set(h,'interpreter','none')
    set(gca,'TickLabelInterpreter','none')
    print([testResultsFolder filesep 'ATP_complex_medium_' reconVersion],'-dpng','-r300')
    
    % report draft models that produce too much ATP
    fprintf('Report for draft models:\n')
    tooHigh=atp{1}(:,1) > 150;
    if sum(tooHigh) > 0
        fprintf([num2str(sum(tooHigh)) '  models produce too much ATP under aerobic conditions.\n'])
    else
        fprintf('All models produce reasonable amounts of ATP under aerobic conditions.\n')
    end
    
    tooHigh=atp{1}(:,2) > 100;
    if sum(tooHigh) > 0
        fprintf([num2str(sum(tooHigh)) '  models produce too much ATP under anaerobic conditions.\n'])
    else
        fprintf('All models produce reasonable amounts of ATP under anaerobic conditions.\n')
    end
    
    % report refined models that produce too much ATP
    fprintf('Report for refined models:\n')
    tooHigh=atp{2}(:,1) > 200;
    if sum(tooHigh) > 0
        fprintf([num2str(sum(tooHigh)) '  models produce too much ATP under aerobic conditions.\n'])
        for i=1:length(tooHigh)
            if tooHigh(i)
                tooHighATP{cnt,1}=modelList{i,1};
                cnt=cnt+1;
            end
        end
    else
        fprintf('All models produce reasonable amounts of ATP under aerobic conditions.\n')
    end
    
    tooHigh=atp{2}(:,2) > 150;
    if sum(tooHigh) > 0
        fprintf([num2str(sum(tooHigh)) '  models produce too much ATP under anaerobic conditions.\n'])
        for i=1:length(tooHigh)
            if tooHigh(i)
                tooHighATP{cnt,1}=modelList{i,1};
                cnt=cnt+1;
            end
        end
    else
        fprintf('All models produce reasonable amounts of ATP under anaerobic conditions.\n')
    end
    
else
    % only refined reconstructions
    if size(data,1) > 5
        figure;
        hold on
        violinplot(data, {'Aerobic','Anaerobic'});
        set(gca, 'FontSize', 12)
        box on
        maxval=max(data,[],'all');
        ylim([0 maxval + maxval/10])
        h=title(['ATP production on complex medium, ' reconVersion]);
        set(h,'interpreter','none')
        set(gca,'TickLabelInterpreter','none')
        print([testResultsFolder filesep 'ATP_complex_medium_' reconVersion],'-dpng','-r300')
    end
    
    % report refined models that produce too much ATP
    fprintf('Report for refined models:\n')
    tooHigh=atp{1}(:,1) > 200;
    if sum(tooHigh) > 0
        fprintf([num2str(sum(tooHigh)) '  models produce too much ATP under aerobic conditions.\n'])
        for i=1:length(tooHigh)
            if tooHigh(i)
                tooHighATP{cnt,1}=modelList{i,1};
                cnt=cnt+1;
            end
        end
    else
        fprintf('All models produce reasonable amounts of ATP under aerobic conditions.\n')
    end
    
    tooHigh=atp{1}(:,2) > 150;
    if sum(tooHigh) > 0
        fprintf([num2str(sum(tooHigh)) '  models produce too much ATP under anaerobic conditions.\n'])
        for i=1:length(tooHigh)
            if tooHigh(i)
                tooHighATP{cnt,1}=modelList{i,1};
                cnt=cnt+1;
            end
        end
    else
        fprintf('All models produce reasonable amounts of ATP under anaerobic conditions.\n')
    end
end

% export list of refined models producing too much ATP
tooHighATP=unique(tooHighATP);
tooHighATP=strrep(tooHighATP,'.mat','');
if size(tooHighATP,1)>0
    save([testResultsFolder filesep 'tooHighATP.mat'],'tooHighATP');
end

% export computed ATP fluxes
if ~isempty(translatedDraftsFolder)
    ATP_fluxes = {'','Aerobic, Draft','Anaerobic, Draft','Aerobic, Refined','Anaerobic, Refined'};
    ATP_fluxes(2:length(modelList)+1,1) = strrep(modelList,'.mat','');
    ATP_fluxes(2:end,2:5) = num2cell(data);
else
    ATP_fluxes = {'','Aerobic, Refined','Anaerobic, Refined'};
    ATP_fluxes(2:length(modelList)+1,1) = strrep(modelList,'.mat','');
    ATP_fluxes(2:end,2:3) = num2cell(data);
end

end
